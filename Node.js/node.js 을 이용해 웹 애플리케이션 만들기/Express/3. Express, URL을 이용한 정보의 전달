---노션---
https://incredible-guan-388.notion.site/Express-URL-a09841b203a04f5b8e02b8266d3a66ef?pvs=74

# 1. 쿼리스트링 소개

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/9ff670fa-267f-4f77-8ad0-63e519fc3ffd/Untitled.png

언제나 똑같이 동작하는 것도 Application 이기는 하지만, 이러한 Application은 별로 쓸모가 없다.

**사용자의 입력값**(In)에 따라서, 그에 해당하는 결과값(Out)을 주는 Application 이 굉장히 유용한 부분이다.

지금까지 우리가 배운 것은, **사용자가 접근하는 주소(In)에 따라서**, **다른 값들을, 다른 controller를, 다른 Output을 보여주는(Out) 것을 구현해왔다.**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/669ab11a-bf16-4e26-8362-ac57e5d9c4bb/Untitled.png

사용자가 접근하는 Path 에 따라서 다른 값들을 가져가는데, 

그 중에서 Path 하나를 놓고보면, (`a.com/topic`)언제나 똑같은 값들을 보여주는 것이다.

만약, topic 이라는 라우트를 가지고 있다면(`app.get('/topic',).....`), 만약 사용자가 topic 으로 접근했을 때(`'/topic'`), 접근하는 사용자마다 하나의 라우터에서도 다른 값들을 다양하게 보여줄 수 있다면 더 좋지 않을까??

**→ '쿼리 스트링'이 나오게 된 계기**

아래의 그림을 찾고해보자.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/984488d2-926b-4942-b96d-72b51bcee891/Untitled.png

topic 이라는 하나의 라우터를  id=1 ,id=2, id=3 을 접근할 때마다 다른 결과를 보여줄 수 있다.

여기에서, `id=1, id=2, id=3` 을 "**쿼리 스트링**"이라고 부른다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b11da2fc-783b-4567-aa61-aa1633baa138/Untitled.png

- **query string** → id =1 , id = 2, id =3
- 전체를 **URL** 이라고 부름 (http:// ~ id=1 까지)
- URL 에서 'http' 를 **프로토콜**이라고 부른다. (웹 페이지를 요청하고 받아내기 위한 목적으로 고안된 하이퍼(**H**yper) 텍스트(**T**ext) 트렌스퍼(**T**ransfer) 프로토콜(**P**rotocol))
- [a.com](http://a.com) →  **도메인** (서버 컴퓨터의 주소)
- topic 은, **path** 라고 부른다. (일종의 **router와 연결되는 부분**)

이를 활용해서, 하나의 topic 이라는 라우터에서도, 사용자가 접근하는 방식에 따라서 다른 결과를 보여줄 수 있게 되었다.

**(id=0)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/fe55f7e8-cf28-440e-8121-f973ba301174/Untitled.png

**(Id=1)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/155d4858-426a-43a3-93f0-e66ff59dde81/Untitled.png

**(id=2)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b9b5675c-f901-4954-83a3-4540d97a8d28/Untitled.png

기존에는 path 값에 따라서 결과값이 달라지게 만들었는데,

이제는 하나의 path 에서도 쿼리스트링을 통해서, 다른 결과값들을 만들 수 있게 되었다.

query 를 사용하는 방법에 대해서 알아보자.

# 2. query 객체의 사용법

query 객체를 사용하는 방법에 대해서 알아보자.

우선, topic 이라는 router 를 만들어보자.

이 router 에는 query 를 사용하는 path 가 될 것이다.

```jsx
app.get('/topic',function(req,res){
  res.send(req.query.id);
});
```

**(해당 코드를 작성하고 결과값)**

→ http://localhost:3000/topic?id=1 로 접근했다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/7ef6c4d6-8cb2-4f28-b2d8-0a15cdb94997/Untitled.png

→ http://localhost:3000/topic?id=2 로 접근했다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/16f2e38e-def2-49a9-a597-52391db8a4f9/Untitled.png

→ http://localhost:3000/topic?id=3 로 접근했다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/f3bafc4a-8d93-4860-9cb5-805b623ed54e/Untitled.png

이러한 결과를 보여준다는 것을 알고, 해당 코드에 대해서 알아보자.

처음보는 코드가 있는, `res.send()`에 들어가는 코드에 주목해보면,

```jsx
req.query.id
```

- req → query(id=1) 자체가 사용자가 요청하는 것이기에, req 인자와 관련이 되어있다.
- query → query 라는 객체
- id → id 라는 프로퍼티의 값

따라서, `res.send([req.query.id](http://req.query.id))` 의 기능은, **사용자 요청하는 req 에서, query 라는 객체 안에 있는 id라는 프로퍼티의 값을 가져온다.** 라고 생각하면된다.

> 만약, req 와 res 란 무엇인지 구체적으로 알고 싶다면, express 사이트인 이곳을 참고하자.
> 

**(`req` 에 관한 설명)**

[4.x API](https://expressjs.com/ko/4x/api.html#req)

- **req.query 에 대한 설명**

[4.x API](https://expressjs.com/ko/4x/api.html#req.query)

**(`res` 에 대한 설명)**

[4.x API](https://expressjs.com/ko/4x/api.html#res)

다시 본론으로 돌아가서,

만약, 사용자의 접근을 [**http://localhost:3000/topic?id=1**](http://localhost:3000/topic?id=1) 의 형식이 아니라, http://localhost:3000/topic?name=JHK 라는 형식을 쓰고 싶다면,

app.get('/topic') 코드를

```jsx
app.get('/topic',function(req,res){
  res.send(req.query.name);
});
```

id → name 으로 변경해주면 가능하다.

**(변경후 결과화면)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b0409f1a-945f-4a90-97fa-408fb6a471ba/Untitled.png

만약, 하나의 변수가 아닌 여러 개의 변수를 검색하고 싶다면, 아래의 코드를 참고하자.

```jsx
app.get('/topic',function(req,res){
  res.send(req.query.id+','+req.query.name);
});
```

- `req.query.id` 라는 값과 `,` 그리고, `req.query.name` 이라는 값을 보내는 코드이다.

이렇게 작성한 코드는,  

**http://localhost:3000/topic?id=1&name=JHK** 에서 처럼

두 개의 변수를 검색하는 방식으로 표현할 수 있다.

해당 코드의 결과로 나오는 화면은

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/e45a914b-60fa-4539-bd51-e982c92a8dca/Untitled.png

처럼 나오게 된다.

### 이를 통해서 URL 에 하나의 프로퍼티 뿐만 아니라, 여러 개의 프로퍼티 또한 가져올 수 있다는 것을 확인할 수 있었다.

# 3. query 객체의 이용

해당 코드를 통해서, 쿼리 스트링마다 다른 기능을 하도록 나오도록 구현해보자.

```jsx
app.get('/topic',function(req,res){
  var topics = [
    'Javascript is ...',
    'Node.js is ...',
    'Express is ...'
  ];
  res.send(topics[req.query.id]);
});
```

- `topics` 배열을 만들어본다.
- [`req.qurey.id`](http://req.qurey.id) 를 통해서, 가져온 id 의 값을 바탕으로, 배열의 요소를 찾도록 배열의 문법을 이용한다.

→ `topics[req.query.id]`

입력하는 id 의 값에 따라서, 다른 기능이 구현되는 것을 확인할 수 있다.

**(http://localhost:3000/topic?id=0)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/a96612f5-aae2-4275-9c2c-88d5e43e5093/Untitled.png

**(http://localhost:3000/topic?id=1)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/aa57f6a8-ca78-4d3d-a720-68f827bdefc5/Untitled.png

**(http://localhost:3000/topic?id=2)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/45b2bec9-7dd7-468d-9cde-e8f93196053f/Untitled.png

URL 에 보통 입력을 하지 않고, 보통은 링크를 만들어서 들어가는 경우가 많다.

이러한 기능을 구현해보자

```jsx
app.get('/topic',function(req,res){
  var topics = [
    'Javascript is ...',
    'Node.js is ...',
    'Express is ...'
  ];
  var output = `
    <a href="/topic?id=0">Javascript</a><br>
    <a href="/topic?id=1">Node.js</a><br>
    <a href="/topic?id=2">Express</a><br><br>
    ${topics[req.query.id]}
  `
  res.send(output);
});
```

- output 이라는 변수를 만들고, html 에서 링크를 작성하는 구문을 이용한다.
- `<a href="/topic?id=0">Javascript</a><br>` 를 통해서, `id=0` 일 때의 링크를 만들고 링크의 텍스트를 `Javascript` 로 하는 코드를 구현했다.
- `<a>` 태그와 `<br>` 태그(줄바꿈 하는 태그)를 이용했다.
- id 마다 다른 기능을 하는 코드를 작성하고, `topics[req.qurey.id]` 를 입력함으로써, 해당 코드의 맞는 topics 배열의 요소가 나오도록 한다.
- `` `` 안에서 변수를 사용하기 위해서는, `${ }` 를 사용해야 한다.

이처럼 작성하고 확인해보면,

**(http://localhost:3000/topic?id=0)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/47047af7-3aba-4638-8cb0-237dc22425dc/Untitled.png

가 나오고, 링크를 누를 때마다 변경되는 것을 확인할 수 있다.

**(Node.js 링크 클릭)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/909ddf2f-85f7-4ebb-9748-d8a569ffa8d0/Untitled.png

**(Express 링크 클릭)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/229ca1d0-e4ef-4be8-bf20-fa2943e80bed/Untitled.png

# 4. 시멘틱 URL (Semantic URL)

이전에 만들었던 URL 에서는, 

**(http://localhost:3000/topic?id=2)** 방식으로 구성했었다.

이번 파트에서는 id 를 제거한, 쿼리스트링없이 깔끔하게 관리할 수 있는 **시멘틱 URL** 을 배워볼 것이다.

**→ (예시) (http://localhost:3000/topic/2)**

쿼리 스트링없이 깔끔하게 URL 을 제어하는 것을 "**시멘틱 웹(Semantic Web)**"이라고 한다.

해당 사이트를 참고해보자.

[간편 URL](https://ko.wikipedia.org/wiki/%EA%B0%84%ED%8E%B8_URL)

현대시대의 URL은, 시멘틱 URL 을 통해서 작성을 하고 있다.

시멘틱 URL 을 사용할 수 있도록 코드를 수정해보자.

```jsx
app.get('/topic/:id',function(req,res){
  var topics = [
    'Javascript is ...',
    'Node.js is ...',
    'Express is ...'
  ];
  var output = `
    <a href="/topic?id=0">Javascript</a><br>
    <a href="/topic?id=1">Node.js</a><br>
    <a href="/topic?id=2">Express</a><br><br>
    ${topics[req.params.id]}
  `
  res.send(output);
});
```

- http://localhost:3000/topic/0 과 같은 URL 로 접속을 하고 싶은 것이기에, 라우터에 해당하는 경로를 바꿔줘야한다.

→ `/topic` ⇒ `/topic/:id` 로 변경함으로써, 위와 같은 URL 형식으로도 접근이 가능해진다. 

이를 통해서,  URL 의 id 에 1,2,3,....10000 등 어떤 숫자가 오든 상관없이 해당 라우트를 탈 수 있도록 해준다.

- 또한,  output 변수 내에 있는 html 형식에서  `${topics[req.query.id]}` 또한, query를 가져오는 방식이 아니기 때문에 (URL 에 query 자체가 없다.) 수정을 해줘야한다.

→ `query` ⇒ `params` 로 변경함으로써, topics 의 값이 잘 나오는 것을 볼 수 있다.

**(http://localhost:3000/topic/0)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/9d7966a5-5f10-41f4-b37c-81eb21c91558/Untitled.png

**([http://localhost:3000/topic/](http://localhost:3000/topic/0)[1](http://localhost:3000/topic/1))**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/8a1b19aa-3881-4a54-a300-808f52b208da/Untitled.png

**([http://localhost:3000/topic/](http://localhost:3000/topic/0)[2)](http://localhost:3000/topic/2)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/8f6f95f8-ef3b-4183-8a5e-6579139121c9/Untitled.png

### 그렇다면, 만약, `/topic/1/edit` 를 통해서, 편집하는 페이지로 보내고 싶다면, 어떻게 해야할까?

여러 가지 방법이 있겠지만, 새로운 router 를 만들어보자.

```jsx
app.get('/topic/:id/:mode', function(req,res){
  res.send(req.params.id+','+req.params.mode)
})
```

- `/topic/:id/:mode` 를 통해서,
- `[req.params.id](http://req.params.id)` 를 통해서 id 의 정보를 받을 수 있다. (ex. 1 )
- `req.params.mode` 를 통해서 mode의 정보를 받을 수 있다. (ex. edit)

(mode 는 임의로 정한 변수이다.)

따라서 해당 코드를 입력했을 때의 결과값은, 

**[(localhost:3000/topic/1/edit)](http://localhost:3000/topic/1/edit)**

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/f6750f22-4858-4bca-b921-086ddc25cf03/Untitled.png

**URL** 의 `id` 와 `mode` 에 해당하는 부분이(`res.send(req.params.id+','+req.params.mode)` 에 의해

화면 상에 보이게 된다.
