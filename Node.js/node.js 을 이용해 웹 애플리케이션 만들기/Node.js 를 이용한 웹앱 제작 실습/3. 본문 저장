# 3. 본문 저장

## (1) body-parser 를 먼저 설치한다. (post 전달된 정보를 다루기 위해서)

```html
npm install --save body-parser
```

body-parser 에 대한 정보는 해당 사이트에서 확인한다.

[body-parser](https://www.npmjs.com/package/body-parser)

설치한 모듈을 세팅하고, 사용하기 위한 코드를 찾아서 가져다가 붙이자.

```jsx
var bodyParser = require('body-Parser');
// body-Parser 사용을 위해서 설정
app.use(bodyParser.urlencoded({ extended: false }));
```

## (2) body-parser 를 사용하여 post 방식의 데이터 전송 라우터를 수정한다.

```jsx
app.post('/topic',function(req,res){
  var title = req.body.title;
  var description = req.body.description;
	res.send('title is' + title);
});
// bodyParser 를 통해서 req 객체에 body 라는 객체가 생성
// title 과 description 변수를 설정한다. req.body 를 사용
```

## (3) 사용자가 작성한 정보를 파일로 저장한다.

- 파일로 저장하기 위해서 `fs` 를 사용하고 `fs` 모듈의 메서드인 `fs.writeFile` 을 사용한다.

우선, `fs` 모듈을 설정한다.

```jsx
var fs = require('fs')
// filesystem 을 사용하기 위해서, (파일 형태로 저장하려고 하기 때문에) fs 모듈 설정
```

`fs.writeFile` 메서드를 사용한다.

```jsx
fs.writeFile('data/'+title, description, function(err){
    if (err){
      console.log(err);
      res.status(500).send('Internal Server Error');
    } 
		res.send('Success!');
		});
});
```

- fs.writeFile 에 대한 정보는, 해당 사이트를 참고하자.

[Node.js v13.13.0 Documentation](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback)

- `fs.writeFile('저장할 파일의 경로', data, callback(err))` 로 이루어져있다.
- 저장할 경로에 패당하는 파일이 없다면, 오류가 발생한다.
- 만약, 에러가 발생한다면, if 문에 `res.status(500).send('Internal Server Error')` 가 발생
- 내부적인 오류정보를 사용자에게 보여주는 것은 보안성의 큰 위험이 될 수 있기 때문에, `.send` 를 통해서 사용자에게 다른 형태로 보여준다.
- 오류가 발생하면, 디버깅을 위해서 console.log() 를 찍어준다.
