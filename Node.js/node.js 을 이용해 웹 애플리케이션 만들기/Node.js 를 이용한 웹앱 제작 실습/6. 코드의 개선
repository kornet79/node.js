**(수정할 부분)**

- 비어있는 article 태그

**(view.jade 파일)**

```
article
      h2=title
      =description
```

**(new.jade 파일)**

```
article
      form(action='/topic' method='post')
        p
          input(type='text' name='title' placeholder='title')
        p
          textarea(name='description')
        p
          input(type='submit')
```

- 중복되는 코드가 많음 (app_file.js) → 중복해서 사용하는 코드에 중복성을 없앨 수 있다.

⇒ 하나의 라우트에 여러가지 경로를 설정할 수 있다.

중복되는 코드를 제거하는 것이 가장 중요하다.

중복을 합치면, 해당하는 부분만 수정하면 모든 소스코드들에 작용되지만,

만약, 중복이 없다면 일일이 하나씩 수정작업을 해줘야한다. 

→ 소스코드를 유지/보수가 굉장히 쉬움

각각에 흩어져있는 코드들이 같은 취지로 만든 것이라는 것을 파악하기 쉽지 않다.

중복을 제거해줌으로써, 확인할 필요가 없어지고, 가독성이 좋아진다.

중복을 제거하는 것이 좋은 코드에 첫 걸음이다.

일단, 처음에는 중복이라는 것 없이 막 작성해보고 이후에 코드를 최적화시키는 것이 좋다.

이렇게 하다보면, 중복없이 작성할 수 있는 코드를 처음 작성할 때 짤 수 있다.

**(중복을 없앤 app_file.js)**

```jsx
// 하나의 라우터에 여러 경로를 합치는 과정 [ ] 안에 넣으면된다.
// 중복되지 않는 부분을 합친다.
app.get(['/topic', '/topic/:id'], function(req, res) {
  fs.readdir('data', function(err, files) {
    if (err) {
      console.log(err);
      res.status(500).send('Internal Server Error');
    }
    var id = req.params.id;
    if (id) {
      // id 값이 있을 때
      fs.readFile('data/' + id, 'utf8', function(err, data) {
        if (err) {
          console.log(err);
          res.status(500).send('Internal Server Error');
        }
        res.render('view', {
          topics: files,
          title: id,
          description: data
        });
      })
    } else {
      //id 값이 없을 때, /topic 으로 검색하고 들어왔을 때
      res.render('view', {
        topics: files,
        title: 'Welcome',
        description: 'Hello, Javascript for server.'
      });
    }
  })
});
```

- 대표 페이지로 가는 것이 불편 → 제목을 누르면 홈으로 가도록

```
h1
	a(href='/topic') Server Side Javascript
```

- 글쓰기 화면으로 이동할 수 있는 링크를 제공 (new 글자를 누르면, form으로 가는 형태)

```
div
	a(href='/topic/new') new
```

- new 를 클릭하면, form 으로 갈 수 있는데, 레이아웃이 동떨어져있는 것 같다.

→ form 에도 view.jade 처럼 코드를 추가하고, 추가한 코드에 필요한 `topic` 을 보내줘야한다. new.jade 로!

**(new.jade 파일)**

```
doctype html
html
  head
    meta(charset='utf-8')
  body
    h1
      a(href='/topic') Server Side Javascript
    ul
      each topic in topics
        li
          a(href='/topic/'+topic)= topic
    article
      form(action='/topic' method='post')
        p
          input(type='text' name='title' placeholder='title')
        p
          textarea(name='description')
        p
          input(type='submit')
```

**(`app_file.js` 파일)**

```jsx
app.get('/topic/new', function(req, res) {
  fs.readdir('data', function(err, files) {
    if (err) {
      console.log(err);
      res.status(500).send('Internal Server Error');
    }
    res.render('new', {
      topics: files
    })
  });
});
```

- new 에서 새로운 정보를 작성하면, success ! 화면으로 가는데, 이를 작성한 정보의 경로로 가도록 해보자

**(`app_file.js` 파일)**

→ `redirect` 를 사용했다.

```jsx
app.post('/topic', function(req, res) {
  var title = req.body.title;
  var description = req.body.description;
  fs.writeFile('data/' + title, description, function(err) {
    if (err) {
      console.log(err);
      res.status(500).send('Internal Server Error');
    } // 글을 잘 작성했는지 볼 수 있게, 경로로 보내준다.
    // redirect 를 통해서 처리를 하고 나서, 사용자를 해당 경로로 다시 보내준다.
    res.redirect('/topic/'+title);
  });
})
```

---

# ★ 최종 코드 ★

## `app_file.js` (서버파일)

```jsx
var express = require('express');
var bodyParser = require('body-Parser');
var fs = require('fs');
var app = express();
app.use(bodyParser.urlencoded({
  extended: false
}));
app.locals.pretty = true;

app.set('views', './views_file');
app.set('view engine', 'jade');

app.get('/topic/new', function(req, res) {
  fs.readdir('data', function(err, files) {
    if (err) {
      console.log(err);
      res.status(500).send('Internal Server Error');
    }
    res.render('new', {
      topics: files
    })
  });
});
// 하나의 라우터에 여러 경로를 합치는 과정 [ ] 안에 넣으면된다.
// 중복되지 않는 부분을 합친다.
app.get(['/topic', '/topic/:id'], function(req, res) {
  fs.readdir('data', function(err, files) {
    if (err) {
      console.log(err);
      res.status(500).send('Internal Server Error');
    }
    var id = req.params.id;
    if (id) {
      // id 값이 있을 때
      fs.readFile('data/' + id, 'utf8', function(err, data) {
        if (err) {
          console.log(err);
          res.status(500).send('Internal Server Error');
        }
        res.render('view', {
          topics: files,
          title: id,
          description: data
        });
      })
    } else {
      //id 값이 없을 때, /topic 으로 검색하고 들어왔을 때
      res.render('view', {
        topics: files,
        title: 'Welcome',
        description: 'Hello, Javascript for server.'
      });
    }
  })
});

// app.get('/topic/:id', function(req, res) {
//   var id = req.params.id;
//   fs.readdir('data', function(err, files) {
//     if (err) {
//       console.log(err);
//       res.status(500).send('Internal Server Error');
//     }
//   })
// });
app.post('/topic', function(req, res) {
  var title = req.body.title;
  var description = req.body.description;
  fs.writeFile('data/' + title, description, function(err) {
    if (err) {
      console.log(err);
      res.status(500).send('Internal Server Error');
    } // 글을 잘 작성했는지 볼 수 있게, 경로로 보내준다.
    // redirect 를 통해서 처리를 하고 나서, 사용자를 해당 경로로 다시 보내준다.
    res.redirect('/topic/'+title);
  });
})

app.listen(3000, function() {
  console.log('Connected, 3000 port!');
})
```

## **`view.jade` 파일 (제일 처음 화면)**

```
doctype html
html
  head
    meta(charset='utf-8')
  body
    h1
      a(href='/topic') Server Side Javascript
    ul
      each topic in topics
        li
          a(href='/topic/'+topic)= topic
    article
      h2=title
      =description
    div
      a(href='/topic/new') new
```

## `**new.jade` 파일 (사용자가 정보를 입력하는 화면)**

```
doctype html
html
  head
    meta(charset='utf-8')
  body
    h1
      a(href='/topic') Server Side Javascript
    ul
      each topic in topics
        li
          a(href='/topic/'+topic)= topic
    article
      form(action='/topic' method='post')
        p
          input(type='text' name='title' placeholder='title')
        p
          textarea(name='description')
        p
          input(type='submit')
```
