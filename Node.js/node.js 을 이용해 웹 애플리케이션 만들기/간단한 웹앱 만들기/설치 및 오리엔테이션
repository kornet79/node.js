---노션---
https://incredible-guan-388.notion.site/acf17f3beaf548a3b76198238bba61ab?pvs=74

# 1. 소개

자바스크립트가 도입되면서, 더 동적인 기능을 할 수 있게 되었다.

웹이 애플리케이션을 확장되는 데 큰 공원을 한 것이 바로 Javascript 였다.

기존에 WEB 이라는 철창에 갇혀있었던, Javascript 라는 언어는 지금만큼의 가치가 없었다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/c916fdbb-2404-48d3-a183-729aa2891de9/Untitled.png

또한, Javascript를 굉장히 쉽게 접근할 수 있게 만드려고 했었기에, 전문가의 시선으로 봤을 때, 너무나 가벼운 언어라고 비하하는 경우도 있었다.

그러던 도중, 구글에서 Gmail 서버를 만들게되면서 달라졌는데, 구글에서 자바스크립트를 본격적으로 사용하면서 인식이 달라지게 되었다

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/48915c43-5a39-486c-9eb9-ecddc6ccc24d/Untitled.png

특히, Gmap. 구글지도 또한 자바스크립트로 작성됐는데, 굉장히 방대한 양의 정보를 다루는 것을 자바스크립트로 이루어내는 것을 보면서 , 큰 파장을 일으켰다.

전세계의 지도를 볼 수 있는 고성능 서비스를 구현해낸 것이다.

웹 브라우저만 동작될 수 있는 상황이라면 언제든지 사용할 수 있다는 굉장히 중요한 상업적 이익을 가지게 된 것이다.

자바스크립트 엔진을 구글에서 직접 개발하면서 더 확장되었다.

V8엔진을 오픈소스로 공개하면서, 자신들의 시스템을 자바스크립트로 풀어낼 수 있게 되었다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/2925d09f-e52d-469b-8bed-e6a59343ee01/Untitled.png

그렇게 되면서, WED에 국한되지않고 탈 WED 하는 현상이 가속화되기 시작했다.

더 이상 WED 에서만 사용하는 것이 아니라, WED 에서도 사용하고 다른 곳에서 사용하기 시작했다.

웹 브라우저 에서는 무조건 자바스크립트만 해야한다는 강점을 가지고 있고, 경쟁 상대들이 들어가 있는 환경에도 들어갈 수 있게 됨으로써, 폭이 굉장히 넓어졌다.

그렇다면, Node.js 란? 기본적으로

구글이 만든 **V8 엔진**을 자바스크립트 엔진으로 사용한다.

또한, **event-driven** 이라는 자바스크립트의 개발 방식과 **non-blocking IO** 라는 컴퓨터의 입력과 출력을 처리하는 방식을 결합해서 "Node.js" 라는 프로젝트가 시작되었다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b783feec-c4bd-406f-830e-b76c7c008ada/Untitled.png

웹 브라우저가 아닌 서버에서도 동작하는 자바스크립트로 확장되는 결정적인 계기를 마련하게 되었다.

웹 브라우저에서 동작하는 자바스크립트와 서버에서 동작하는 자바스크립트 Node.js 의 차이점은 무엇일까?

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/db8ece7b-dab5-4f03-b59b-20c2f3aebf4b/Untitled.png

자바스크립트를 이야기할 때, 

1. 언어(Web Browser)
2. 동작하는 환경(RunTime) → Node.js

두 가지를 섞어서 자바스크립트라고 하는데,

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/1becb10e-b414-428d-95aa-23afdfbd91d8/Untitled.png

예를 들면,

한국어(Javascript)가 사용되는 환경에 따라서, 다른 표현과 개념으로 사용한다.

병원(Web Browser)을 갔을 때와 법원(Node.js)에 갔을 때

그 분야에서 사용하는 언어들을 사용함으로써, 그 분야의 일을 하게 되는 것이다.

자바스크립트를 가지고서 다양한 것들을 할 수 있다는 것이다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/e9077bb0-4c37-4873-8812-cfa7760e253a/Untitled.png

alert('Hello world') → 자바스크립트의 문법 ('함수'라고 부름)

함수라고 하는 것은 , 문법이기 때문에 웹브라우저와 Node.js 쓰는 것이 비슷하다.

alert 를 웹브라우저가 아닌 곳에서 동작하면, 동작하지 않음

(법원에서 주사를 넣어달라는 것과 유사)

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b6d7da7f-0cd9-4c32-a70d-67a45068c35b/Untitled.png

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/ccc157b9-b4ff-438c-8f0e-a02dcfed8e7a/Untitled.png

자바스크립트를 할줄 알면, WEB Browser 도 작동할 수 있고, Node.js 도 작동할 수 있다.

하지만, 각각에서만 할 수 있는 것들을 잘 모른다면 사용할 수 없다.

서로 다른 영역에서 동작하고, 서로가 협력하는 관계라고 생각하면된다.

웹 브라우저의 자바스크립트와 런타임의 노드 JS 를 명확하게 알아야한다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/20087c67-b1e1-497c-b427-afcf521a4e50/Untitled.png

서버에서 사용하는 자바, php ,python, ruby 등은 Node.js 와의 경쟁이라고 보면 된다.

Node.js 는 굉장히 속도가 좋은 구글의 V8 엔진을 사용하기 때문에 굉장히 성능이 좋다.

패러다임을 사용하고 있기 때문에, 적합한 상황이 닥치면 굉장히 성능이 좋은 애플리케이션을 만들 수 있다.

웹브라우저에서도 자바스크립트를 쓰고, 서버에서도 쓰기 때문에, 

클라이언트 부터 시작해서 서버쪽에서도 자바스크립트를 사용하면서, 하나의 완벽한 애플리케이션을 만들 수 있는 것을 의미한다.

하나의 언어로 애플리케이션을 구현할 수 있다는 것을 굉장히 매력적인 점이다.

# 2. 설치

[Download | Node.js](https://nodejs.org/en/download/)

해당 사이트를 이용해서, 설치한다.

본인의 운영체제와 비트를 확인해서 다운받고, (윈도우 기준) `cmd`창을 연다.

윈도우 검색창에, `cmd` 라고 입력하면 나온다.

node --version : 다운받은 노드JS의 버전을 확인할 수 있다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/d04c1852-cc6f-4199-8867-5e81a1ff7007/Untitled.png

# 3. 실행

공부할 때 사용할 Project 디렉터리를 만든다.

자신의 사용자 폴더 - dev - js - server_side_javasript 폴더를 생성한다.

Javascript 를 다룰 때, **ATOM 에디터**를 사용할 것이다.

[A hackable text editor for the 21st Century](https://atom.io/)

ATOM 에디터를 통해서 방금 생성한 server_side_javascript 폴더로 접속한다.

**hello.js** 파일를 만든다.

**console.log('Hello world');** 를 입력하고, 터미널을 연다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/84253100-012c-4a42-9693-dafad61c8efc/Untitled.png

(웹 브라우저에서도 콘솔을 찍으면 결과값이 나온다.)

Node.js 에서 console.log를 하기 위해서는, 터미널 창으로 들어가야한다.

cmd 명령창으로 들어가서 `dir/w` 를 입력하면 홈 디렉터리를 볼 수 있다.

`cls` 를 이용하면, 해당 커멘드를 깨끗하게 비울 수 있다. **(=clear 와 같은 기능)**

`type 파일명` 을 이용하면, 해당 파일에 작성된 내용을 볼 수 있다. **(via 와 같은 기능)**

프로젝트 파일이 있는 폴더에 들어가기 위해서, 현재 위치에 있는 파일이나 폴더를 볼 수 있는 `dir` 을 사용하고

`cd dev` → dev 디렉터리로 들어간다.

`dev - js - server_side_javascript` 디렉터리로 들어간다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/98d15282-c423-4987-ac61-14c8898741a7/Untitled.png

해당 경로에서 dir 을 입력하면, server_side_javascript에 있는 파일들을 확인할 수 있다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/bc7df463-3931-4eaa-a59a-2587020d2996/Untitled.png

만들었던, hello.js 를 실행하기 위해서, `node hello.js` 를 입력하면, 파일에 입력했던 console.log 값이 나오는 것을 확인할 수 있다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/776e0f09-cf60-40f2-afd5-339cc7666765/Untitled.png

추가적으로 간단한 산술연산을 넣고 해보면,

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/f5a1a75d-d0a5-498e-97c8-9f1e44a9293a/Untitled.png

추가한 console.log(10+24) 의 결과값이 나온 것을 볼 수 있다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b763dbf1-e26a-417d-aa71-1961ac33d774/Untitled.png
